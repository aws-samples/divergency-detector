1
00:00:00,000 --> 00:00:02,130
AWS CloudFormation Features.

2
00:00:03,160 --> 00:00:04,430
Here are the key features.

3
00:00:05,300 --> 00:00:06,350
Extensibility.

4
00:00:07,200 --> 00:00:11,100
Using the AWS CloudFormation registry, model, provision,

5
00:00:11,160 --> 00:00:13,400
and manage third-party application resources

6
00:00:13,640 --> 00:00:17,680
alongside AWS resources with AWS CloudFormation.

7
00:00:17,690 --> 00:00:22,980
You can build your own resource providers using the AWS CloudFormation CLI,

8
00:00:22,990 --> 00:00:25,980
which is an open-source tool that streamlines the development

9
00:00:25,980 --> 00:00:30,720
process and includes local testing and code-generation capabilities.

10
00:00:31,550 --> 00:00:33,320
Authoring with JSON or YAML.

11
00:00:34,240 --> 00:00:39,160
AWS CloudFormation allows you to model your entire infrastructure in a text file.

12
00:00:39,890 --> 00:00:41,410
You can use JSON or YAML

13
00:00:41,550 --> 00:00:45,560
to describe what AWS resources you want to create and configure.

14
00:00:46,370 --> 00:00:47,690
If you want to design visually,

15
00:00:47,690 --> 00:00:50,480
you can use AWS CloudFormation Designer to

16
00:00:50,480 --> 00:00:53,570
help you get started with AWS CloudFormation templates.

17
00:00:55,210 --> 00:00:57,100
Authoring with familiar programming.

18
00:00:57,890 --> 00:01:02,080
With the AWS Cloud Development Kit, or AWS CDK,

19
00:01:02,090 --> 00:01:05,379
you can define your application using TypeScript, Python,

20
00:01:05,390 --> 00:01:09,010
Java (developer preview) and .NET (developer preview).

21
00:01:09,820 --> 00:01:12,130
AWS CDK is an open-source software

22
00:01:12,130 --> 00:01:14,940
development framework that helps you model your cloud application

23
00:01:14,940 --> 00:01:17,660
resources using familiar programming languages,

24
00:01:17,860 --> 00:01:21,260
and then provision your infrastructure using AWS CloudFormation

25
00:01:21,320 --> 00:01:22,950
directly from your IDE.

26
00:01:23,950 --> 00:01:26,250
CDK provides you with high-level components

27
00:01:26,260 --> 00:01:29,150
that preconfigure cloud resources with proven defaults,

28
00:01:29,160 --> 00:01:32,560
so you can build cloud applications without needing to be an expert.

29
00:01:34,400 --> 00:01:36,080
Preview changes to your environment.

30
00:01:36,780 --> 00:01:39,640
If you want to make changes to the running resources in a stack,

31
00:01:39,700 --> 00:01:41,070
you update the stack.

32
00:01:42,150 --> 00:01:44,280
Before making changes to your resources,

33
00:01:44,290 --> 00:01:46,060
you can generate a change set,

34
00:01:46,100 --> 00:01:48,150
which is a summary of your proposed changes.

35
00:01:49,120 --> 00:01:51,240
AWS CloudFormation change sets

36
00:01:51,250 --> 00:01:53,300
allow you to preview how proposed changes to

37
00:01:53,300 --> 00:01:55,840
a stack might impact your running resources,

38
00:01:56,620 --> 00:02:01,290
for example, whether your changes will delete or replace any critical resources.

39
00:02:01,300 --> 00:02:04,540
AWS CloudFormation makes the changes to your stack

40
00:02:04,550 --> 00:02:07,090
only after you decide to execute the change set.

41
00:02:08,590 --> 00:02:09,880
Dependency management.

42
00:02:10,449 --> 00:02:14,160
AWS CloudFormation automatically manages dependencies between

43
00:02:14,160 --> 00:02:16,830
your resources during stack management actions.

44
00:02:17,620 --> 00:02:20,260
You do not need to worry about specifying the order

45
00:02:20,300 --> 00:02:23,960
in which resources are created, updated, or deleted.

46
00:02:24,760 --> 00:02:26,380
CloudFormation determines

47
00:02:26,560 --> 00:02:28,390
the correct sequence of actions to use

48
00:02:28,390 --> 00:02:31,060
for each resource when performing stack operations.

49
00:02:32,360 --> 00:02:34,390
This is how CloudFormation works.

50
00:02:34,400 --> 00:02:37,670
First, code your infrastructure from scratch with the CloudFormation

51
00:02:37,670 --> 00:02:41,240
template language in either YAML or JSON format,

52
00:02:41,810 --> 00:02:44,580
or start from many available sample templates.

53
00:02:45,510 --> 00:02:49,040
Next, you can check out your template code locally or upload it

54
00:02:49,080 --> 00:02:50,340
into an S3 bucket.

55
00:02:51,450 --> 00:02:52,340
Then you can use

56
00:02:52,720 --> 00:02:55,420
AWS CloudFormation via the browser console,

57
00:02:55,530 --> 00:02:57,640
command-line tools, or APIs

58
00:02:57,860 --> 00:03:00,000
to create a stack based on your template code.

59
00:03:00,990 --> 00:03:03,970
AWS CloudFormation provisions and configures the

60
00:03:03,970 --> 00:03:06,690
stacks and resources you specified on your template.

