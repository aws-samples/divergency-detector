1
00:00:00,000 --> 00:00:03,980
Welcome to an Overview of Container Services on AWS.

2
00:00:04,160 --> 00:00:06,530
With traditional software deployment,

3
00:00:06,560 --> 00:00:10,410
you will have hardware or infrastructure that runs an operating system.

4
00:00:10,670 --> 00:00:12,570
And on top of that operating system,

5
00:00:12,630 --> 00:00:17,400
you will run multiple applications like Python, Node.js, or Ruby.

6
00:00:17,830 --> 00:00:22,120
These applications require specific libraries and dependencies to run properly.

7
00:00:23,840 --> 00:00:27,970
And that can cause difficult installations or application version conflicts

8
00:00:28,100 --> 00:00:30,440
that make scaling your applications challenging.

9
00:00:31,320 --> 00:00:32,420
Software deployment

10
00:00:32,420 --> 00:00:36,390
using containers provides a standard way to package your application's code,

11
00:00:36,570 --> 00:00:37,300
libraries,

12
00:00:37,450 --> 00:00:39,660
and dependencies into a single object.

13
00:00:40,190 --> 00:00:42,400
With software deployment using containers,

14
00:00:42,510 --> 00:00:46,620
you have infrastructure and an operating system as well as a container engine,

15
00:00:46,770 --> 00:00:47,480
like Docker,

16
00:00:47,670 --> 00:00:50,520
that share the resources of the underlying operating system

17
00:00:50,660 --> 00:00:51,760
with your application

18
00:00:52,210 --> 00:00:55,250
and create container packages that include the libraries

19
00:00:55,250 --> 00:00:57,680
and dependencies needed for your application to run.

20
00:00:57,980 --> 00:01:01,920
This enables you to move your applications across different platforms with these.

21
00:01:02,570 --> 00:01:05,550
This makes containers lightweight, portable,

22
00:01:05,720 --> 00:01:08,830
and scalable, which makes containers suitable

23
00:01:08,930 --> 00:01:11,850
for use cases like microservices applications,

24
00:01:11,870 --> 00:01:15,050
batch jobs, and migrating applications to the cloud.

25
00:01:16,370 --> 00:01:19,610
AWS container services offer the broadest choice

26
00:01:19,610 --> 00:01:22,100
of services to run your containers.

27
00:01:23,240 --> 00:01:25,320
You can choose AWS Fargate

28
00:01:25,340 --> 00:01:28,940
if you want serverless compute for containers, or Amazon EC2

29
00:01:28,940 --> 00:01:30,790
if you need control over the installation,

30
00:01:30,950 --> 00:01:31,910
configuration,

31
00:01:32,080 --> 00:01:34,010
and management of your compute environment.

32
00:01:34,360 --> 00:01:37,220
You can also choose which container orchestrator to use,

33
00:01:37,220 --> 00:01:40,500
either Amazon Elastic Container Service, or ECS,

34
00:01:40,580 --> 00:01:44,120
or Amazon Elastic Kubernetes Service, or EKS.

35
00:01:44,930 --> 00:01:49,800
AWS container services are deeply integrated with AWS by design.

36
00:01:50,250 --> 00:01:53,240
This allows your container applications to leverage the

37
00:01:53,240 --> 00:01:55,380
breadth and depth of the AWS Cloud,

38
00:01:55,550 --> 00:01:58,890
providing security and elasticity for your applications.

39
00:01:59,290 --> 00:02:02,230
AWS services such as AWS Fargate,

40
00:02:02,400 --> 00:02:03,580
Amazon ECS,

41
00:02:03,800 --> 00:02:05,160
and Amazon EKS

42
00:02:05,160 --> 00:02:05,200
also enable you to run and manage Docker containers at scale.
and Amazon EKS

43
00:02:05,200 --> 00:02:08,570
also enable you to run and manage Docker containers at scale.

44
00:02:09,520 --> 00:02:13,480
Container management tools can be broken down into three categories:

45
00:02:13,520 --> 00:02:16,380
registry, orchestration, and compute.

46
00:02:16,650 --> 00:02:19,570
AWS offers services that give you a secure place to

47
00:02:19,570 --> 00:02:23,260
store and manage your container images like Amazon ECR.

48
00:02:23,890 --> 00:02:25,960
Orchestration helps you manage when

49
00:02:26,150 --> 00:02:26,740
and where

50
00:02:26,870 --> 00:02:27,980
your containers run,

51
00:02:28,140 --> 00:02:31,480
as well as the flexible compute engines that power your containers

52
00:02:31,620 --> 00:02:33,420
with ECS, EKS,

53
00:02:33,750 --> 00:02:35,690
and the Red Hat OpenShift Service for AWS.

54
00:02:37,480 --> 00:02:41,500
AWS can help manage your containers and their deployments for you,

55
00:02:41,510 --> 00:02:44,780
so you don't have to worry about the underlying infrastructure with

56
00:02:44,800 --> 00:02:46,180
AWS Fargate or

57
00:02:46,180 --> 00:02:46,190
AWS App Runner.
AWS Fargate or

58
00:02:46,190 --> 00:02:47,510
AWS App Runner.

59
00:02:48,110 --> 00:02:51,670
Or you can choose to control your own virtual infrastructure

60
00:02:51,820 --> 00:02:53,520
with EC2 instances.

