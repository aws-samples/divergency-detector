1
00:00:00,000 --> 00:00:03,770
Amazon DynamoDB - Secondary Indexes Overview.

2
00:00:04,700 --> 00:00:08,080
Amazon DynamoDB provides fast access to items in

3
00:00:08,080 --> 00:00:10,890
a table by specifying primary key values.

4
00:00:10,900 --> 00:00:14,210
However, many applications might benefit from having

5
00:00:14,210 --> 00:00:16,710
one or more secondary indexes available.

6
00:00:16,720 --> 00:00:21,680
Let's look at this example to see why. This Music library DynamoDB table has

7
00:00:21,680 --> 00:00:25,580
defined artist as the partition key and song title as the sort key.

8
00:00:26,170 --> 00:00:27,780
With this set of primary keys,

9
00:00:27,800 --> 00:00:31,480
you can easily find a list of all the songs by a specific artist.

10
00:00:32,020 --> 00:00:36,670
However, if you want to find all the albums in a specific year such as 2019,

11
00:00:36,680 --> 00:00:40,080
it would be more beneficial to use secondary index.

12
00:00:40,080 --> 00:00:42,480
Since the year attribute is not part of the primary key,

13
00:00:42,490 --> 00:00:45,580
you can scan the entire table for album and filtering for

14
00:00:45,580 --> 00:00:49,640
the specific year but this is very inefficient and time-consuming.

15
00:00:49,650 --> 00:00:52,480
Secondary index provides efficient access to data

16
00:00:52,480 --> 00:00:54,840
with attributes other than the primary key.

17
00:00:55,280 --> 00:00:59,380
A secondary index is a data structure that contains a subset of attributes

18
00:00:59,380 --> 00:01:03,330
from a table along with an alternate key to support query operations.

19
00:01:03,340 --> 00:01:06,660
You can query or scan based on secondary indexes

20
00:01:06,670 --> 00:01:08,840
just as you would query or scan a table.

21
00:01:10,260 --> 00:01:13,330
A table can have multiple secondary indexes, which gives

22
00:01:13,330 --> 00:01:16,380
your applications access to many different query patterns.

23
00:01:16,390 --> 00:01:20,180
Every secondary index is associated with exactly one table,

24
00:01:20,180 --> 00:01:21,690
the base table for the index.

25
00:01:22,250 --> 00:01:23,620
When you create an index,

26
00:01:23,630 --> 00:01:26,170
you define an alternate key for the index, which

27
00:01:26,170 --> 00:01:28,310
includes the partition key and the sort key.

28
00:01:28,830 --> 00:01:30,790
You also define the attributes that you want to

29
00:01:30,790 --> 00:01:33,620
be projected or copied from the base table into the index.

30
00:01:33,620 --> 00:01:37,930
DynamoDB copies these attributes into the index along

31
00:01:37,930 --> 00:01:40,710
with the primary key attributes from the base table.

32
00:01:41,370 --> 00:01:45,620
Every secondary index is automatically maintained by Amazon DynamoDB.

33
00:01:46,290 --> 00:01:49,710
When you add, modify, or delete items in the base table,

34
00:01:49,800 --> 00:01:53,580
any indexes on that table are also updated with the same changes.

35
00:01:54,270 --> 00:01:58,850
There are two types of secondary indexes: global secondary index, or GSI,

36
00:01:58,860 --> 00:02:01,830
and local secondary index, or LSI.

37
00:02:01,830 --> 00:02:05,040
A global secondary index is an index that can have a partition key

38
00:02:05,040 --> 00:02:07,790
and a sort key different from those on the base table.

39
00:02:07,800 --> 00:02:09,270
The sort key is optional.

40
00:02:10,039 --> 00:02:12,690
You can choose to project attributes from the base table.

41
00:02:14,080 --> 00:02:17,610
It is considered global because queries on the index can span

42
00:02:17,610 --> 00:02:20,530
all of the data in the base table across all partitions.

43
00:02:21,130 --> 00:02:23,600
Global secondary index is stored in its own

44
00:02:23,600 --> 00:02:25,940
partition space away from the base table.

45
00:02:25,950 --> 00:02:29,670
Local secondary index has the same partition key as the base table,

46
00:02:29,680 --> 00:02:31,150
but a different sort key.

47
00:02:31,160 --> 00:02:34,020
Similarly, you can choose to have projected attributes.

48
00:02:34,540 --> 00:02:37,660
It is considered local because the local secondary index

49
00:02:37,660 --> 00:02:40,180
shares the same partition of the base table partition.

