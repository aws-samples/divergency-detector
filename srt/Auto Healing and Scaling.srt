1
00:00:00,000 --> 00:00:02,340
Let's review auto scaling

2
00:00:02,340 --> 00:00:04,680
and auto healing on AWS.

3
00:00:05,080 --> 00:00:06,760
AWS Auto Scaling

4
00:00:06,910 --> 00:00:10,560
monitors your applications and automatically adjusts capacity

5
00:00:10,690 --> 00:00:12,460
to maintain steady and

6
00:00:12,580 --> 00:00:15,200
predictable performance at the lowest possible cost.

7
00:00:15,500 --> 00:00:17,140
AWS Auto Scaling

8
00:00:17,290 --> 00:00:19,700
makes it easy to set up application scaling

9
00:00:19,860 --> 00:00:23,350
for different types of resources across multiple services,

10
00:00:23,760 --> 00:00:25,860
and you can configure this in minutes.

11
00:00:26,480 --> 00:00:28,120
You can build scaling plans

12
00:00:28,240 --> 00:00:33,010
using a simple interface to manage resources like Amazon EC2 Spot Fleets,

13
00:00:33,160 --> 00:00:35,920
Elastic Container Service tasks, and

14
00:00:36,050 --> 00:00:38,210
DynamoDB tables and indexes.

15
00:00:38,660 --> 00:00:40,010
Scaling is simplified

16
00:00:40,170 --> 00:00:42,670
with recommendations that optimize performance

17
00:00:42,810 --> 00:00:44,220
and costs or

18
00:00:44,350 --> 00:00:46,100
establishes a balance between them.

19
00:00:46,470 --> 00:00:48,790
You can also configure smart-scaling

20
00:00:48,790 --> 00:00:52,160
policies to calculate the appropriate scaling adjustments

21
00:00:52,290 --> 00:00:54,320
that immediately add or remove capacity

22
00:00:54,320 --> 00:00:57,270
from your applications based on targeted metrics

23
00:00:57,400 --> 00:00:59,180
like CPU utilization.

24
00:01:00,250 --> 00:01:01,680
Let's review how

25
00:01:01,700 --> 00:01:05,580
AWS Auto Scaling can automatically heal applications.

26
00:01:05,970 --> 00:01:07,000
In this example,

27
00:01:07,110 --> 00:01:10,100
an application is powered by EC2 instances

28
00:01:10,200 --> 00:01:12,410
that sit behind an Elastic Load Balancer.

29
00:01:12,850 --> 00:01:17,130
The Auto Scaling group is configured to have an optimal capacity of six instances

30
00:01:17,240 --> 00:01:19,480
spread across two Availability Zones.

31
00:01:19,870 --> 00:01:22,790
If an instance in Availability Zone number one is failing,

32
00:01:22,950 --> 00:01:25,740
an ELB health check will determine instance health, and

33
00:01:25,740 --> 00:01:28,550
that triggers the launching of a new healthy instance.

34
00:01:28,980 --> 00:01:29,560
Now ...

35
00:01:29,560 --> 00:01:31,310
Now the application has returned

36
00:01:31,430 --> 00:01:32,570
to its optimal state.

37
00:01:33,610 --> 00:01:37,870
An Auto Scaling group can also rebalance instances when necessary.

38
00:01:38,320 --> 00:01:40,850
If Availability Zone number one goes offline,

39
00:01:41,020 --> 00:01:43,840
the Auto Scaling service will rebalance the instance load

40
00:01:43,990 --> 00:01:46,630
by shifting instances to Availability Zone two,

41
00:01:46,780 --> 00:01:49,620
until Availability Zone number one comes back online,

42
00:01:49,820 --> 00:01:51,770
making your applications more available

43
00:01:51,930 --> 00:01:52,780
and resilient.

44
00:01:53,690 --> 00:01:55,280
Now let's review how

45
00:01:55,280 --> 00:01:56,840
AWS Auto Scaling

46
00:01:56,970 --> 00:01:57,860
can integrate with

47
00:01:57,860 --> 00:02:00,810
AWS services using lifecycle hooks.

48
00:02:01,110 --> 00:02:02,520
With lifecycle hooks,

49
00:02:02,650 --> 00:02:07,120
you can perform actions on instances in an Auto Scaling group based on an event.

50
00:02:07,540 --> 00:02:08,479
For example,

51
00:02:08,610 --> 00:02:10,820
when an instance is flagged for termination,

52
00:02:10,979 --> 00:02:13,440
a CloudWatch event detects the termination call,

53
00:02:13,580 --> 00:02:15,260
which will trigger a Lambda function.

54
00:02:15,500 --> 00:02:16,860
The Lambda function invokes

55
00:02:16,860 --> 00:02:16,870
AWS Systems Manager,
The Lambda function invokes

56
00:02:16,870 --> 00:02:18,490
AWS Systems Manager,

57
00:02:18,630 --> 00:02:21,460
and Systems Manager places the instance into a terminating

58
00:02:21,555 --> 00:02:22,275
wait state.

59
00:02:22,695 --> 00:02:24,525
While the instance is in the wait state,

60
00:02:24,665 --> 00:02:28,845
Systems Manager bundles the application logs on the instance into a zip file

61
00:02:29,005 --> 00:02:31,205
and stores them in an Amazon S3 bucket

62
00:02:31,325 --> 00:02:32,975
before termination is complete.

63
00:02:33,265 --> 00:02:35,715
The Auto Scaling service verifies with Lambda

64
00:02:35,885 --> 00:02:37,805
that the log-saving process is complete

65
00:02:37,885 --> 00:02:40,275
before it resumes terminating the instance.

66
00:02:40,705 --> 00:02:41,865
With this automation,

67
00:02:41,995 --> 00:02:45,995
you can save application logging information before instance termination

68
00:02:46,145 --> 00:02:48,705
to aid in diagnosing any application issues.

