1
00:00:00,370 --> 00:00:03,300
Amazon API Gateway Staging.

2
00:00:04,560 --> 00:00:07,220
API Gateway stages are similar to tags.

3
00:00:07,230 --> 00:00:10,070
It works as a pointer, a pointer to a deployment.

4
00:00:11,300 --> 00:00:15,040
In this particular scenario we are looking at, we have three stages.

5
00:00:15,050 --> 00:00:19,340
One is a Prod, one is a Beta, and one is a Dev.

6
00:00:19,450 --> 00:00:21,960
This allows you to have different testing areas.

7
00:00:21,970 --> 00:00:26,280
You can have your developers just testing and developing using only the Dev stage.

8
00:00:26,290 --> 00:00:28,690
You can have Beta where your business might be checking

9
00:00:28,690 --> 00:00:30,820
the latest versions of what you are going to do,

10
00:00:31,060 --> 00:00:34,160
and then you have Prod, or Production, where that's actually out there,

11
00:00:34,240 --> 00:00:36,530
and you can move developments through these stages.

12
00:00:37,320 --> 00:00:40,590
With stages, you can manage and optimize a particular deployment.

13
00:00:40,610 --> 00:00:41,570
For example,

14
00:00:41,600 --> 00:00:43,450
you can set up stage settings to enable

15
00:00:43,450 --> 00:00:46,930
caching and configure time-to-live and capacity size,

16
00:00:46,940 --> 00:00:50,650
or customize request throttling to prevent your API

17
00:00:50,650 --> 00:00:53,150
from being overwhelmed by too many requests.

18
00:00:53,220 --> 00:00:55,780
You can use AWS WAF to protect your API

19
00:00:55,780 --> 00:00:58,810
from common web exploits such as SQL injection

20
00:00:58,820 --> 00:01:00,350
cross-site scripting attacks.

21
00:01:00,550 --> 00:01:02,030
Within the stage configuration,

22
00:01:02,030 --> 00:01:05,060
you can also generate your client SDKs for the API

23
00:01:05,100 --> 00:01:08,950
or export the API and download OpenAPI definitions,

24
00:01:08,960 --> 00:01:11,520
configure logging and tracing settings for the stage.

25
00:01:11,720 --> 00:01:15,520
And you still can roll back to an earlier API deployment version.

26
00:01:19,280 --> 00:01:21,370
Stages and stage variables.

27
00:01:21,380 --> 00:01:23,850
Stage variables are name-value pairs that you can

28
00:01:23,850 --> 00:01:27,110
define as configuration attributes associated with a stage.

29
00:01:28,620 --> 00:01:32,720
They act like environment variables and can be used in your API setup.

30
00:01:32,720 --> 00:01:33,970
For example,

31
00:01:33,970 --> 00:01:38,350
we can use a stage variable to customize the HTTP integration endpoint.

32
00:01:38,360 --> 00:01:44,160
In this diagram, the production stage variable URL is configured as example.com,

33
00:01:44,280 --> 00:01:49,340
and the Beta stage variable is configured as beta.example.com.

34
00:01:49,350 --> 00:01:54,660
And finally, the Dev stage variable is configured as dev.example.com.

35
00:01:55,890 --> 00:01:58,880
Now you set up an HTTP proxy integration,

36
00:01:58,890 --> 00:02:01,460
and instead of entering directly the endpoint's URL,

37
00:02:01,470 --> 00:02:05,450
you can tell API Gateway to use the stage variable string value.

38
00:02:05,460 --> 00:02:09,479
In our example, it is http://$

39
00:02:10,370 --> 00:02:14,880
This value tells API Gateway to substitute your stage variable at runtime.

40
00:02:14,890 --> 00:02:17,770
And with this configuration, you can use the same

41
00:02:17,780 --> 00:02:20,350
API setup with a different endpoint.

