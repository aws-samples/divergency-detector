1
00:00:00,000 --> 00:00:04,350
AWS CloudFormation Template Anatomy - More Template Sections.

2
00:00:05,390 --> 00:00:06,110
Conditions.

3
00:00:06,800 --> 00:00:09,910
The optional conditions section contains statements that define

4
00:00:09,910 --> 00:00:13,060
the circumstances under which certain resources are created,

5
00:00:13,200 --> 00:00:17,030
configured, or assigned a value during stack creation or update.

6
00:00:17,870 --> 00:00:21,620
You can define conditions using intrinsic functions such as the following.

7
00:00:22,560 --> 00:00:23,520
For example,

8
00:00:23,530 --> 00:00:25,740
you could create a resource when the condition that

9
00:00:25,740 --> 00:00:28,600
the stack is for a production environment is true.

10
00:00:28,610 --> 00:00:32,360
The Equals intrinsic function is used to perform the comparison.

11
00:00:33,740 --> 00:00:35,070
Transform.

12
00:00:35,080 --> 00:00:39,010
The optional Transform section specifies one or more macros

13
00:00:39,020 --> 00:00:42,590
that AWS CloudFormation uses to process your template.

14
00:00:42,600 --> 00:00:46,240
When you specify the AWS::Serverless transform macros,

15
00:00:46,250 --> 00:00:50,940
you can use the AWS Serverless Application Model, or AWS SAM, syntax

16
00:00:51,160 --> 00:00:53,160
to declare resources in your template.

17
00:00:53,710 --> 00:00:56,750
AWS CloudFormation transforms and expands it

18
00:00:56,750 --> 00:00:59,990
into a compliant AWS CloudFormation template.

19
00:01:00,000 --> 00:01:02,590
For example, in the Transform section,

20
00:01:02,600 --> 00:01:08,190
the AWS::Serverless macro is used, and the version of the AWS SAM is specified.

21
00:01:08,200 --> 00:01:11,150
Then the Resources section declares a Lambda function

22
00:01:11,150 --> 00:01:13,840
and its execution code using SAM syntax.

23
00:01:14,790 --> 00:01:19,980
You can also use the AWS::Include transform to work with template snippets that are

24
00:01:19,980 --> 00:01:23,400
stored separately from the main AWS CloudFormation template,

25
00:01:23,450 --> 00:01:25,320
such as an Amazon S3 bucket.

26
00:01:26,120 --> 00:01:29,510
You can then reuse the template snippets across multiple templates.

27
00:01:30,180 --> 00:01:31,180
In this example,

28
00:01:31,250 --> 00:01:34,300
the AWS::Include transform creates a reference to

29
00:01:34,300 --> 00:01:36,930
a template snippet in an Amazon S3 bucket.

30
00:01:38,720 --> 00:01:39,710
Resources.

31
00:01:40,280 --> 00:01:42,070
The required resources section

32
00:01:42,080 --> 00:01:45,890
declares the AWS resources that you want to include in the stack.

33
00:01:46,450 --> 00:01:50,520
You can refer to resources in the Resources and Output sections of the template.

34
00:01:51,170 --> 00:01:55,300
The logical ID is used as a logical name to reference the resource

35
00:01:55,310 --> 00:01:56,770
in other parts of the template.

36
00:01:57,280 --> 00:02:01,200
The resource type identifies the type of resource that you're declaring.

37
00:02:01,210 --> 00:02:05,880
You can specify a set of properties that are additional options for a resource.

38
00:02:06,430 --> 00:02:07,410
In this example,

39
00:02:07,440 --> 00:02:12,840
you specify an EC2 instance with a specific Amazon Machine Image, or AMI, ID

40
00:02:12,840 --> 00:02:13,770
for that instance.

41
00:02:14,750 --> 00:02:15,500
Outputs.

42
00:02:16,140 --> 00:02:19,470
The optional Output section describes the output values that

43
00:02:19,470 --> 00:02:22,230
are returned whenever you view your stack's properties.

44
00:02:22,910 --> 00:02:23,820
In this example,

45
00:02:23,930 --> 00:02:26,440
the EC2Instance ID value is returned.

46
00:02:27,040 --> 00:02:29,780
You can import the output value into other stacks,

47
00:02:29,790 --> 00:02:34,000
return in response, or view on the AWS CloudFormation console.

48
00:02:35,070 --> 00:02:36,560
Pseudo Parameters.

49
00:02:36,570 --> 00:02:41,490
Pseudo parameters are parameters that are predefined by AWS CloudFormation.

50
00:02:42,080 --> 00:02:48,570
You can use pseudo parameters to retrieve data, such as account ID, AWS Region,

51
00:02:48,580 --> 00:02:50,450
the suffix for a domain,

52
00:02:50,460 --> 00:02:54,170
the partition that the resource is in, StackID,

53
00:02:54,180 --> 00:02:59,210
StackName, and a list of notification Amazon resource names for the stack.

54
00:02:59,220 --> 00:03:02,060
You can also use the NoValue pseudo parameter

55
00:03:02,070 --> 00:03:07,470
to remove a resource property. Pseudo parameter is used the same way as a parameter

56
00:03:07,480 --> 00:03:09,530
or is the argument for the Ref function

