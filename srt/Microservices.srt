1
00:00:00,180 --> 00:00:01,240
Microservices.

2
00:00:02,320 --> 00:00:05,300
Microservices are an architectural and organizational

3
00:00:05,300 --> 00:00:08,000
approach to software development, where software is

4
00:00:08,000 --> 00:00:12,640
composed of small independent services that communicate over well-defined APIs.

5
00:00:13,880 --> 00:00:15,740
These services are owned by small,

6
00:00:15,900 --> 00:00:17,060
self-contained teams.

7
00:00:17,990 --> 00:00:20,470
Microservices architectures make applications

8
00:00:20,570 --> 00:00:22,600
easier to scale and faster to develop,

9
00:00:22,610 --> 00:00:26,360
enabling innovation and accelerating time to market for new features.

10
00:00:27,910 --> 00:00:30,320
Microservices have two main characteristics.

11
00:00:31,200 --> 00:00:32,030
Autonomous.

12
00:00:32,820 --> 00:00:35,520
Each component service in a microservices architecture

13
00:00:35,640 --> 00:00:37,610
can be developed, deployed,

14
00:00:37,620 --> 00:00:42,060
operated, and scaled without affecting the functioning of other services.

15
00:00:43,240 --> 00:00:45,110
Services do not need to share any of

16
00:00:45,110 --> 00:00:47,650
their code or implementation with other services.

17
00:00:48,420 --> 00:00:53,050
Any communication between individual components happens via well-defined APIs.

18
00:00:53,980 --> 00:00:55,030
Specialized.

19
00:00:55,880 --> 00:00:57,690
Each service is designed for a set of

20
00:00:57,690 --> 00:01:01,010
capabilities and focuses on solving a specific problem.

21
00:01:01,910 --> 00:01:04,280
If developers contribute more code to a service

22
00:01:04,290 --> 00:01:06,790
over time, and the service becomes complex,

23
00:01:06,870 --> 00:01:09,260
it can be broken into smaller services.

24
00:01:11,010 --> 00:01:12,000
Let's look at what are the

25
00:01:12,000 --> 00:01:14,950
differences between monolithic and microservices architectures.

26
00:01:15,750 --> 00:01:17,170
Monolithic architecture.

27
00:01:18,100 --> 00:01:19,710
With monolithic architectures,

28
00:01:19,720 --> 00:01:23,790
all processes are tightly coupled and run as a single service.

29
00:01:24,660 --> 00:01:29,150
This means that if one process of the application experiences a spike in demand,

30
00:01:29,240 --> 00:01:31,320
the entire architecture must be scaled.

31
00:01:32,860 --> 00:01:36,910
Adding or improving a monolithic application's features becomes more complex

32
00:01:36,910 --> 00:01:38,170
as the code base grows.

33
00:01:38,860 --> 00:01:40,920
This complexity limits experimentation

34
00:01:41,200 --> 00:01:43,450
and makes it difficult to implement new ideas.

35
00:01:44,160 --> 00:01:46,100
Monolithic architecture is at risk for

36
00:01:46,100 --> 00:01:49,120
application availability because many dependent and

37
00:01:49,120 --> 00:01:53,370
tightly coupled processes increase the impact of a single process failure.

38
00:01:54,990 --> 00:01:56,560
Microservices architecture.

39
00:01:57,180 --> 00:02:00,940
With a microservices architecture, an application is built as independent

40
00:02:00,940 --> 00:02:04,500
components that run each application process as a service.

41
00:02:05,180 --> 00:02:09,759
These services communicate via well-defined interfaces using lightweight APIs.

42
00:02:10,610 --> 00:02:12,930
Services are built for business capabilities,

43
00:02:13,090 --> 00:02:15,340
and each service performs a single function.

44
00:02:16,120 --> 00:02:19,160
Because they are independently run, each service can be updated,

45
00:02:19,170 --> 00:02:23,610
deployed, and scaled to meet demand for specific functions of an application.

46
00:02:25,330 --> 00:02:27,310
Here are the benefits of microservices.

47
00:02:27,930 --> 00:02:28,620
Agility.

48
00:02:29,410 --> 00:02:32,100
Microservices foster an organization of small,

49
00:02:32,190 --> 00:02:35,200
independent teams that take ownership of their services.

50
00:02:35,760 --> 00:02:38,980
Teams act within a small and well-understood context

51
00:02:38,980 --> 00:02:42,390
and are empowered to work more independently and more quickly.

52
00:02:42,960 --> 00:02:44,770
This shortens development cycle times.

53
00:02:46,140 --> 00:02:47,400
Flexible scaling.

54
00:02:47,990 --> 00:02:51,440
Microservices allow each service to be independently scaled to

55
00:02:51,440 --> 00:02:53,940
meet demand for the application feature it supports.

56
00:02:53,970 --> 00:02:55,870
This enables teams to rightsize

57
00:02:55,880 --> 00:02:58,250
infrastructure needs, accurately measure the cost of

58
00:02:58,250 --> 00:03:02,980
a feature, and maintain availability if a service experiences a spike in demand.

59
00:03:04,460 --> 00:03:05,570
Easy deployment.

60
00:03:06,240 --> 00:03:09,980
Microservices enable continuous integration and continuous delivery, or CI/CD,

61
00:03:09,990 --> 00:03:14,370
making it easy to try out new ideas and to roll back if something doesn't work.

62
00:03:15,320 --> 00:03:19,600
The low cost of failure enables experimentation, makes it easier to update code,

63
00:03:19,800 --> 00:03:22,150
and accelerates time to market for new features.

64
00:03:23,080 --> 00:03:24,450
Technological freedom.

65
00:03:25,210 --> 00:03:29,600
Teams have the freedom to choose the best tool to solve their specific problems.

66
00:03:29,610 --> 00:03:31,110
As a consequence, teams

67
00:03:31,110 --> 00:03:34,600
building microservices can choose the best tool for each job.

68
00:03:35,830 --> 00:03:36,890
Reusable code.

69
00:03:37,620 --> 00:03:40,270
Dividing software into small, well-defined modules

70
00:03:40,280 --> 00:03:43,080
enables teams to use functions for multiple purposes.

71
00:03:43,090 --> 00:03:46,110
A service written for a certain function can be

72
00:03:46,110 --> 00:03:48,660
used as a building block for another feature.

73
00:03:49,250 --> 00:03:51,410
Developers can create new capabilities

74
00:03:51,780 --> 00:03:53,570
without writing code from scratch.

75
00:03:54,550 --> 00:03:55,410
Resilience.

76
00:03:56,190 --> 00:03:59,840
Service independence increases an application's resistance to failure.

77
00:04:00,680 --> 00:04:01,890
With microservices,

78
00:04:01,920 --> 00:04:05,740
applications handle total service failure by degrading functionality

79
00:04:05,900 --> 00:04:07,820
and not crashing the entire application.

80
00:04:09,200 --> 00:04:14,420
AWS provides the most complete platform for microservices, including compute,

81
00:04:15,600 --> 00:04:17,120
storage and databases,

82
00:04:18,370 --> 00:04:19,180
networking,

83
00:04:21,300 --> 00:04:22,050
messaging,

84
00:04:24,010 --> 00:04:25,360
logging and monitoring,

85
00:04:26,600 --> 00:04:27,980
and DevOps services.

86
00:04:29,790 --> 00:04:31,200
You can build your microservices

87
00:04:31,200 --> 00:04:33,080
architecture on this platform.

88
00:04:33,100 --> 00:04:33,980
It has all the integrated

89
00:04:33,980 --> 00:04:36,850
building blocks that support any application architecture,

90
00:04:36,870 --> 00:04:39,390
regardless of scale, load, or complexity.

