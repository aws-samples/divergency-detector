1
00:00:00,130 --> 00:00:02,260
AWS CodeDeploy Features.

2
00:00:03,160 --> 00:00:05,860
Here are the key features - Automated

3
00:00:05,940 --> 00:00:07,310
instance deployments features.

4
00:00:08,039 --> 00:00:09,290
Repeatable deployments.

5
00:00:09,870 --> 00:00:12,210
You can easily repeat an application deployment

6
00:00:12,220 --> 00:00:15,660
across different groups of instances with AWS CodeDeploy.

7
00:00:16,230 --> 00:00:20,080
CodeDeploy uses a file- and command-based install model, which enables

8
00:00:20,080 --> 00:00:23,520
it to deploy any application and reuse existing setup code.

9
00:00:24,120 --> 00:00:25,410
Automatic scaling.

10
00:00:25,930 --> 00:00:28,750
AWS CodeDeploy allows you to integrate

11
00:00:28,750 --> 00:00:31,400
software deployment and scaling activities in order

12
00:00:31,400 --> 00:00:34,930
to keep your application up to date in a dynamic production environment.

13
00:00:35,690 --> 00:00:37,560
For Amazon EC2 instances,

14
00:00:37,690 --> 00:00:39,680
CodeDeploy integrates with auto scaling.

15
00:00:40,340 --> 00:00:42,840
Auto scaling allows you to scale EC2

16
00:00:42,940 --> 00:00:45,370
capacity according to conditions you define,

17
00:00:45,380 --> 00:00:49,510
such as spikes in traffic. CodeDeploy is notified whenever

18
00:00:49,510 --> 00:00:52,040
a new instance launches into an Auto Scaling Group.

19
00:00:52,720 --> 00:00:56,370
It will then automatically perform an application deployment on the new instance.

20
00:00:57,250 --> 00:00:58,660
On-premises deployments.

21
00:00:59,400 --> 00:01:02,090
You can use AWS CodeDeploy to automate

22
00:01:02,090 --> 00:01:04,220
software deployments running on any instance,

23
00:01:04,239 --> 00:01:06,720
including instances in your own data centers.

24
00:01:06,730 --> 00:01:07,910
In this scenario,

25
00:01:07,940 --> 00:01:11,750
your instances will need to be able to connect to AWS public endpoints.

26
00:01:12,500 --> 00:01:14,650
This enables you to use a single service

27
00:01:14,690 --> 00:01:18,380
to consistently deploy applications across hybrid architectures.

28
00:01:19,760 --> 00:01:21,590
Minimize downtime features.

29
00:01:22,140 --> 00:01:23,880
Rolling and blue/green update.

30
00:01:24,550 --> 00:01:29,790
AWS CodeDeploy can perform blue/green deployments to Amazon EC2 instances

31
00:01:29,910 --> 00:01:33,010
and Amazon ECS service, including both EC2 and

32
00:01:33,020 --> 00:01:36,820
AWS Fargate launch type, or an AWS Lambda function.

33
00:01:37,530 --> 00:01:39,030
With a blue/green deployment,

34
00:01:39,070 --> 00:01:42,630
the new version of your application is launched alongside the old version.

35
00:01:43,400 --> 00:01:45,970
Once the new revision is tested and declared ready,

36
00:01:46,090 --> 00:01:48,760
CodeDeploy can shift the traffic from your prior version

37
00:01:48,880 --> 00:01:51,220
to your new version according to your specifications.

38
00:01:51,900 --> 00:01:57,090
CodeDeploy can also perform a rolling update across a group of Amazon EC2 instances.

39
00:01:57,900 --> 00:02:01,490
Only a fraction of the instances are taken offline at any one time.

40
00:02:02,140 --> 00:02:05,390
CodeDeploy progressively works its way across the instances,

41
00:02:05,400 --> 00:02:09,180
allowing applications to remain available and continue serving traffic.

42
00:02:10,330 --> 00:02:12,660
Deployment health tracking. Deployment

43
00:02:12,660 --> 00:02:15,510
health tracking works in conjunction with rolling updates

44
00:02:15,520 --> 00:02:18,380
to keep applications highly available during deployments.

45
00:02:18,420 --> 00:02:22,320
Unexpected downtime can occur if bad updates are deployed.

46
00:02:22,330 --> 00:02:27,180
AWS CodeDeploy monitors your deployment, and if there are too many failed updates,

47
00:02:27,190 --> 00:02:28,420
it will stop the deployment.

48
00:02:29,090 --> 00:02:30,500
Stop and rollback.

49
00:02:30,510 --> 00:02:34,610
You can stop an application deployment that is in process at any time

50
00:02:34,620 --> 00:02:41,110
using the AWS Management Console, the AWS CLI, or any of the AWS SDKs.

51
00:02:41,790 --> 00:02:44,220
You can simply re-deploy that revision if you want

52
00:02:44,220 --> 00:02:46,700
to continue the stopped deployment at a later time.

53
00:02:46,710 --> 00:02:50,840
You can also immediately roll back by redeploying the previous revision.

54
00:02:51,800 --> 00:02:55,280
Centralized control features. Monitoring and control.

55
00:02:55,290 --> 00:02:58,250
You can launch control and monitor deployments

56
00:02:58,300 --> 00:03:01,640
of your software directly from the AWS Management Console

57
00:03:01,720 --> 00:03:06,370
or by using the AWS CLI, SDKs, or APIs.

58
00:03:07,210 --> 00:03:11,050
In the case of a failure, you can pinpoint the script experiencing failure.

59
00:03:11,060 --> 00:03:15,050
You can also set push notifications that allow you to monitor the status

60
00:03:15,100 --> 00:03:17,150
of your deployments, via SMS or

61
00:03:17,150 --> 00:03:20,530
email messages through Amazon Simple Notification Service.

62
00:03:21,700 --> 00:03:22,770
Deployment groups.

63
00:03:22,850 --> 00:03:26,460
One application can be deployed to multiple deployment groups.

64
00:03:26,530 --> 00:03:30,960
Deployment groups are used to match configurations to specific environments,

65
00:03:31,080 --> 00:03:34,270
such as a testing, staging, or production environment.

66
00:03:34,330 --> 00:03:37,190
You can test a revision in staging and then deploy

67
00:03:37,190 --> 00:03:40,190
that same code with the same deployment instructions to production

68
00:03:40,210 --> 00:03:41,590
once you are satisfied.

69
00:03:42,540 --> 00:03:43,830
Deployment history.

70
00:03:43,840 --> 00:03:48,170
AWS CodeDeploy tracks and stores the recent history of your deployments.

71
00:03:48,180 --> 00:03:51,060
You can view which application versions are currently

72
00:03:51,060 --> 00:03:53,600
deployed to each of your target deployment groups.

73
00:03:53,610 --> 00:03:56,320
You can inspect the change history and success

74
00:03:56,320 --> 00:03:59,030
rates of past deployments to specific deployment groups.

75
00:03:59,040 --> 00:04:02,670
You can also investigate a timeline of past deployments for

76
00:04:02,670 --> 00:04:05,400
a detailed view of your deployment successes and errors.

77
00:04:06,610 --> 00:04:09,940
Easy-to-adopt features. Language and architecture

78
00:04:09,940 --> 00:04:12,860
agnostic. CodeDeploy uses a single

79
00:04:12,860 --> 00:04:15,480
application specification configuration file,

80
00:04:15,490 --> 00:04:18,029
the App Spec file, which defines the deployment

81
00:04:18,029 --> 00:04:20,079
actions you want CodeDeploy to execute.

82
00:04:20,779 --> 00:04:22,930
You define the install, run actions,

83
00:04:22,940 --> 00:04:25,850
tests, or verifications at each phase of deployment,

84
00:04:25,860 --> 00:04:28,250
which is referred to as the lifecycle event.

85
00:04:28,310 --> 00:04:31,230
The commands can be any code such as a shell script,

86
00:04:31,240 --> 00:04:34,830
a custom program, or even a configuration management tool.

87
00:04:34,870 --> 00:04:37,880
This file- and command-based install model enables it

88
00:04:37,880 --> 00:04:41,220
to deploy any application and reuse existing setup code.

89
00:04:41,960 --> 00:04:43,420
Tool chain integration.

90
00:04:43,930 --> 00:04:47,410
It is easy to integrate application deployments with your existing

91
00:04:47,410 --> 00:04:51,880
software-delivery tool chain by using the AWS CodeDeploy APIs,

92
00:04:52,090 --> 00:04:54,120
AWS CodePipeline,

93
00:04:54,170 --> 00:04:58,640
AWS CodeStar, and some AWS Partners-provided pre-built CodeDeploy

94
00:04:58,640 --> 00:05:03,270
integrations for continuous integration and continuous delivery, or CI/CD, services,

95
00:05:03,280 --> 00:05:06,810
making it simple to automatically deploy your updated application.

96
00:05:07,880 --> 00:05:10,980
Received notification features - review defined events.

97
00:05:10,990 --> 00:05:13,820
You can create notifications for events

98
00:05:13,820 --> 00:05:17,080
impacting your deployments. Notifications will come in

99
00:05:17,080 --> 00:05:19,600
the form of Amazon SNS notifications.

100
00:05:19,610 --> 00:05:22,420
Each notification includes a status message

101
00:05:22,430 --> 00:05:26,210
as well as a link to the resources whose event generated that notification.

