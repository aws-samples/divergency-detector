1
00:00:00,230 --> 00:00:03,460
AWS Serverless Application Model (SAM).

2
00:00:05,620 --> 00:00:10,090
The AWS Serverless Application Model, or SAM, is an extension of AWS CloudFormation

3
00:00:10,090 --> 00:00:14,080
and is an open-source framework for building serverless applications.

4
00:00:15,890 --> 00:00:17,730
SAM is a template-driven model.

5
00:00:18,600 --> 00:00:20,940
The template provides a simplified way of defining

6
00:00:20,940 --> 00:00:23,850
resources such as the Amazon API Gateway,

7
00:00:23,860 --> 00:00:25,330
AWS Lambda functions,

8
00:00:25,460 --> 00:00:27,460
Amazon DynamoDB tables,

9
00:00:27,580 --> 00:00:28,800
and Event source mappings

10
00:00:28,920 --> 00:00:32,390
in your serverless applications by just using shorthand syntax.

11
00:00:33,650 --> 00:00:36,350
With just a few lines per AWS resource,

12
00:00:36,360 --> 00:00:40,210
you can define the application you want and model it using YAML or JSON.

13
00:00:41,780 --> 00:00:44,680
You can use SAM to run your serverless applications locally,

14
00:00:44,800 --> 00:00:48,100
package, and deploy your applications to the AWS Cloud.

15
00:00:48,890 --> 00:00:49,950
During deployment,

16
00:00:49,980 --> 00:00:55,140
SAM transforms and expands the SAM syntax into AWS CloudFormation syntax,

17
00:00:55,180 --> 00:00:57,860
enabling you to build serverless applications faster.

18
00:00:58,610 --> 00:01:03,440
To get started with building SAM-based applications, use the AWS SAM CLI.

19
00:01:04,209 --> 00:01:06,310
SAM and SAM CLI are open-sourced

20
00:01:06,650 --> 00:01:08,840
under the Apache 2.0 license.

21
00:01:10,600 --> 00:01:12,430
Here is an example of a SAM template.

22
00:01:13,160 --> 00:01:15,520
The first two lines is the transform section.

23
00:01:15,530 --> 00:01:18,170
The second line indicates that it is a SAM template

24
00:01:18,210 --> 00:01:21,110
that needs to be transformed to the CloudFormation syntax.

25
00:01:22,050 --> 00:01:23,930
The next section defines the resources.

26
00:01:24,790 --> 00:01:29,870
The resource type AWS::Serverless::Function creates an AWS Lambda function.

27
00:01:29,880 --> 00:01:32,710
It also defines the code, handler, runtime, and

28
00:01:32,710 --> 00:01:34,950
an execution policy for this Lambda function.

29
00:01:36,420 --> 00:01:39,820
The resource type Api creates an Amazon API Gateway,

30
00:01:40,000 --> 00:01:41,400
defines the path and method,

31
00:01:41,820 --> 00:01:44,070
and its interface to connect to the Lambda function.

32
00:01:44,860 --> 00:01:49,840
The last line with resource type SimpleTable creates an Amazon DynamoDB table.

33
00:01:50,910 --> 00:01:51,580
In addition,

34
00:01:51,590 --> 00:01:55,030
AWS SAM defines other resource types such as LayerVersion

35
00:01:55,030 --> 00:01:58,650
for Lambda layer version and Application for nested application.

36
00:01:59,550 --> 00:02:03,140
As you can see in this example, with just these simple lines of code,

37
00:02:03,340 --> 00:02:06,920
a Lambda function, an API Gateway, and a DynamoDB table

38
00:02:06,960 --> 00:02:08,970
are created and defined to work together.

39
00:02:11,560 --> 00:02:12,390
Why SAM?

40
00:02:12,930 --> 00:02:14,840
Single deployment configuration.

41
00:02:14,850 --> 00:02:17,620
You can use SAM to organize related components,

42
00:02:17,820 --> 00:02:21,780
share configuration such as memory and timeouts between resources,

43
00:02:22,350 --> 00:02:25,920
and deploy all related resources together as a single version entity.

44
00:02:28,200 --> 00:02:30,260
SAM also provides local testing

45
00:02:30,370 --> 00:02:33,240
and debugging capabilities for your serverless applications.

46
00:02:33,830 --> 00:02:36,940
You can use SAM CLI to step through and debug your code.

47
00:02:37,720 --> 00:02:42,320
SAM CLI provides a Lambda-like execution environment that lets you locally build,

48
00:02:42,330 --> 00:02:45,590
test, and debug applications defined by SAM templates.

49
00:02:45,620 --> 00:02:49,180
This helps to catch issues up front before deploying in the cloud.

50
00:02:50,620 --> 00:02:52,100
Built-in best practices.

51
00:02:52,680 --> 00:02:55,220
You can deploy your infrastructure as Config to

52
00:02:55,220 --> 00:02:58,610
leverage built-in best practices such as code reviews.

53
00:02:59,280 --> 00:03:02,510
With just a few lines of SAM Config, you can enable gradual

54
00:03:02,510 --> 00:03:08,490
deployments through AWS CodeDeploy and tracing to diagnose issues using AWS X-Ray.

55
00:03:10,660 --> 00:03:12,800
Integration with development tools.

56
00:03:12,810 --> 00:03:16,360
SAM integrates with a suite of AWS serverless tools.

57
00:03:16,990 --> 00:03:21,020
You can find new applications in the AWS Serverless Application repository,

58
00:03:21,030 --> 00:03:24,030
which is a managed repository for serverless applications.

59
00:03:24,710 --> 00:03:29,140
SAM also integrates with AWS Cloud9 IDE, where you can write, test,

60
00:03:29,270 --> 00:03:31,690
and debug SAM-based serverless applications.

61
00:03:33,460 --> 00:03:38,580
Using the AWS SAM template, you can build a deployment pipeline with AWS CodeBuild,

62
00:03:38,590 --> 00:03:41,940
AWS CodeDeploy, and AWS CodePipeline.

63
00:03:42,740 --> 00:03:45,160
AWS CodeStar also supports SAM.

64
00:03:45,560 --> 00:03:47,780
You can use CodeStar to start a project,

65
00:03:47,790 --> 00:03:49,460
configure a code repository,

66
00:03:49,500 --> 00:03:54,280
and a continuous integration, continuous delivery, or CI/CD, pipeline for you.

67
00:03:56,590 --> 00:03:58,720
Built on AWS CloudFormation.

68
00:03:59,330 --> 00:04:02,910
Since AWS SAM is an extension of AWS CloudFormation,

69
00:04:02,920 --> 00:04:06,500
you can define resources using CloudFormation in your SAM template.

70
00:04:07,240 --> 00:04:10,410
You can use the full suite of resources, intrinsic functions,

71
00:04:10,550 --> 00:04:14,110
and other template features that are available in AWS CloudFormation.

72
00:04:14,910 --> 00:04:15,580
In addition,

73
00:04:15,590 --> 00:04:20,100
AWS SAM also gets the same reliable deployment capabilities of CloudFormation.

