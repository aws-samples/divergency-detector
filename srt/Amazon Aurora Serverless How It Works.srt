1
00:00:00,340 --> 00:00:02,370
How Amazon Aurora Serverless Works?

2
00:00:03,670 --> 00:00:05,310
In order to understand how it works,

3
00:00:05,330 --> 00:00:07,540
let's look at the Aurora Serverless architecture.

4
00:00:08,500 --> 00:00:11,380
With Aurora Serverless, when creating a database endpoint,

5
00:00:11,390 --> 00:00:14,560
you do not need to specify the database instance class size.

6
00:00:14,570 --> 00:00:17,460
You just need to set the minimum and maximum capacity.

7
00:00:17,480 --> 00:00:20,400
Instead of directly connecting to the database resources,

8
00:00:20,410 --> 00:00:23,080
the database endpoint connects to a proxy fleet.

9
00:00:23,090 --> 00:00:27,160
Database client applications don't need to change to use the proxy fleet.

10
00:00:27,190 --> 00:00:29,190
The proxy fleet routes the workload to a

11
00:00:29,190 --> 00:00:31,900
fleet of resources that are automatically scaled.

12
00:00:32,000 --> 00:00:34,980
Aurora Serverless manages the connections automatically.

13
00:00:35,140 --> 00:00:39,700
Because of the proxy fleet, connections are continuous as Aurora Serverless scales the resources

14
00:00:39,700 --> 00:00:43,320
automatically based on the minimum and maximum capacity specifications.

15
00:00:43,960 --> 00:00:46,940
Scaling is rapid because it uses a pool of warm resources

16
00:00:46,940 --> 00:00:48,940
that are always ready to service requests.

17
00:00:48,990 --> 00:00:51,000
Storage and processing are separate.

18
00:00:51,010 --> 00:00:54,880
So you can scale down to zero processing and pay only for storage.

19
00:00:56,850 --> 00:00:57,840
Autoscaling.

20
00:00:58,780 --> 00:01:01,310
Instead of provisioning and managing database servers,

21
00:01:01,440 --> 00:01:03,470
you specify Aurora capacity units,

22
00:01:03,600 --> 00:01:04,340
or ACUs.

23
00:01:04,470 --> 00:01:08,340
Each ACU is a combination of processing and memory capacity.

24
00:01:08,450 --> 00:01:12,800
Database storage automatically scales from 10 gigibytes to 64 tebibytes,

25
00:01:12,970 --> 00:01:15,815
the same as storage in a standard Aurora DB cluster.

26
00:01:16,045 --> 00:01:18,595
You can specify the minimum and a maximum ACU.

27
00:01:18,765 --> 00:01:23,995
The minimum Aurora capacity unit is the lowest ACU to which the DB cluster can scale down.

28
00:01:24,275 --> 00:01:27,255
The maximum Aurora capacity unit is the highest ACU

29
00:01:27,575 --> 00:01:29,515
to which the DB cluster can scale up.

30
00:01:31,060 --> 00:01:32,070
Scaling point.

31
00:01:32,080 --> 00:01:34,560
A scaling point is a point in time at

32
00:01:34,560 --> 00:01:37,580
which the database can safely initiate the scaling operation.

33
00:01:37,780 --> 00:01:41,140
When Aurora Serverless determines that the DB cluster should be scaled,

34
00:01:41,180 --> 00:01:44,980
it continues to try to find a scaling point to initiate the scaling operation.

35
00:01:45,760 --> 00:01:46,290
However,

36
00:01:46,290 --> 00:01:48,100
Aurora Serverless might not be able to

37
00:01:48,100 --> 00:01:50,720
find a scaling point when long-running queries

38
00:01:50,720 --> 00:01:56,310
or transactions are in progress or when temporary tables or table locks are in use.

39
00:01:56,320 --> 00:01:58,740
You can see scaling events in the details for

40
00:01:58,740 --> 00:02:01,470
a DB cluster in the AWS Management Console.

41
00:02:01,480 --> 00:02:04,380
You can also monitor the current capacity allocated to the DB cluster

42
00:02:04,380 --> 00:02:09,190
by using the ServerlessDatabaseCapacity metric for Amazon CloudWatch.

43
00:02:09,199 --> 00:02:13,150
During autoscaling, Aurora Serverless resets the EngineUpTime metric.

44
00:02:13,420 --> 00:02:17,240
The reset metric value doesn't indicate any issues with seamless scaling

45
00:02:17,360 --> 00:02:19,540
and doesn't mean that any connections were dropped.

46
00:02:23,070 --> 00:02:25,530
The Aurora Serverless DB cluster capacity

47
00:02:25,680 --> 00:02:28,070
seamlessly scales up and down based on the load,

48
00:02:28,230 --> 00:02:30,060
that is, the CPU utilization and number

49
00:02:30,060 --> 00:02:32,850
of connections generated by your client application.

50
00:02:33,640 --> 00:02:36,280
When there are no connections for a five-minute period,

51
00:02:36,290 --> 00:02:40,690
it scales to zero capacity. When capacity constraints are seen, for example,

52
00:02:40,690 --> 00:02:45,650
when greater than 70 percent CPU utilization or greater than 90 percent of max. connections,

53
00:02:45,740 --> 00:02:47,630
Aurora Serverless scales up.

54
00:02:47,640 --> 00:02:51,240
It also scales up when it detects performance issues that can be resolved by

55
00:02:51,240 --> 00:02:56,410
scaling up. After scaling up, the cooldown period for scaling down is 15 minutes.

56
00:02:56,840 --> 00:03:01,430
After scaling down, the cooldown period for scaling down again is 310 seconds.

57
00:03:01,510 --> 00:03:03,740
There is no cooldown period for scaling up.

58
00:03:05,700 --> 00:03:09,530
Next, let's look at an autoscaling example. Based on settings,

59
00:03:09,540 --> 00:03:12,600
Aurora Serverless automatically creates scaling rules.

60
00:03:13,230 --> 00:03:14,190
For example,

61
00:03:14,190 --> 00:03:19,180
when greater than 70 percent CPU utilization or greater than 90 percent of max. connections,

62
00:03:19,190 --> 00:03:21,930
Aurora Serverless scales up. Aurora Serverless

63
00:03:21,930 --> 00:03:23,780
manages the warm pool of resources to

64
00:03:23,780 --> 00:03:28,280
minimize scaling time. It takes DB capacity from the warm pool. Next,

65
00:03:28,290 --> 00:03:30,260
it starts looking for a scaling point,

66
00:03:30,270 --> 00:03:32,550
a point in time at which the database can safely

67
00:03:32,550 --> 00:03:36,180
initiate the scaling operation. When the scaling point is found,

68
00:03:36,180 --> 00:03:40,230
Aurora Serverless adds new resources to the Aurora DB cluster.

69
00:03:40,450 --> 00:03:44,650
It uses a proxy fleet to switch active client connections to the new resources.

70
00:03:45,840 --> 00:03:48,770
At any specific time, you are only charged for the ACUs

71
00:03:48,900 --> 00:03:52,020
that are being actively used in your Aurora DB cluster.

72
00:03:55,090 --> 00:03:58,340
You can choose to pause your Aurora Serverless DB cluster.

73
00:03:58,340 --> 00:04:00,150
After a given amount of time with no activity,

74
00:04:00,150 --> 00:04:03,010
you can choose to pause your Aurora Serverless DB cluster.

75
00:04:03,710 --> 00:04:07,900
You specify the amount of time with no activity before the DB cluster is paused.

76
00:04:07,910 --> 00:04:09,360
The default is five minutes.

77
00:04:09,440 --> 00:04:11,430
When the DB cluster is paused,

78
00:04:11,440 --> 00:04:15,610
no computer or memory activity occurs, and you are charged only for storage.

79
00:04:15,620 --> 00:04:18,640
You can also disable pausing the DB cluster.

80
00:04:18,640 --> 00:04:21,200
If a DB cluster is paused for more than seven days,

81
00:04:21,209 --> 00:04:24,280
the DB cluster might be backed up with a snapshot.

82
00:04:24,290 --> 00:04:26,560
If database connections are requested,

83
00:04:26,570 --> 00:04:29,330
when Aurora Serverless DB cluster is paused,

84
00:04:29,340 --> 00:04:33,110
the DB cluster automatically resumes and services the connection requests.

85
00:04:35,890 --> 00:04:38,180
Timeout Action For Capacity Changes.

86
00:04:38,190 --> 00:04:39,830
When you change the capacity,

87
00:04:39,840 --> 00:04:42,930
Aurora Serverless tries to find a scaling point for the change.

88
00:04:42,940 --> 00:04:46,630
If Aurora Serverless can't find a scaling point, it times out.

89
00:04:46,640 --> 00:04:49,840
You can specify one of the following timeout actions to take.

90
00:04:50,450 --> 00:04:52,400
You can force the capacity change.

91
00:04:52,410 --> 00:04:55,770
This sets the capacity to the specified value as soon as possible.

92
00:04:55,780 --> 00:04:58,050
You can also roll back the capacity change,

93
00:04:58,060 --> 00:05:00,340
which means the capacity change is canceled.

