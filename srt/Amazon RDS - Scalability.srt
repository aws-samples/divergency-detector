1
00:00:00,000 --> 00:00:03,930
Amazon Relational Database Service Features (RDS) - Scalability.

2
00:00:04,700 --> 00:00:07,260
Here are the key features for scalability.

3
00:00:07,300 --> 00:00:08,950
Push-button compute scaling.

4
00:00:08,950 --> 00:00:12,570
You can scale the compute and memory resources vertically up

5
00:00:12,570 --> 00:00:15,070
or down up to a maximum of 32 vCPUs

6
00:00:15,070 --> 00:00:18,440
and 244 gibibytes of RAM.

7
00:00:18,580 --> 00:00:21,880
Compute-scaling operations typically complete in a few minutes.

8
00:00:22,750 --> 00:00:24,280
Easy storage scaling.

9
00:00:24,440 --> 00:00:29,000
The Amazon Aurora engine will automatically grow the size of your database volume,

10
00:00:29,040 --> 00:00:31,420
as your database storage needs to grow up to a

11
00:00:31,420 --> 00:00:35,080
maximum of 64 terabytes or a maximum you define.

12
00:00:35,750 --> 00:00:39,810
The MySQL, MariaDB, Oracle, and PostgreSQL engines

13
00:00:39,920 --> 00:00:42,860
allow you to scale up to 64 terabytes of storage.

14
00:00:42,920 --> 00:00:45,380
And SQL Server supports up to 16 terabytes.

15
00:00:46,250 --> 00:00:47,840
Storage scaling is on the fly

16
00:00:47,990 --> 00:00:49,190
with zero downtime.

17
00:00:50,120 --> 00:00:52,070
Amazon RDS read replicas

18
00:00:52,190 --> 00:00:53,610
provide enhanced performance

19
00:00:53,730 --> 00:00:57,160
and durability for RDS database DB instances.

20
00:00:57,460 --> 00:01:00,140
It helps to offload read-heavy database workloads.

21
00:01:01,580 --> 00:01:05,830
You can create one or more read replicas of a given primary DB instance

22
00:01:05,850 --> 00:01:09,470
within an Availability Zone, cross-AZ, or cross-Region.

23
00:01:09,550 --> 00:01:14,520
The read replica operates as a DB instance that allows only read-only connections,

24
00:01:14,600 --> 00:01:17,560
while master or primary DB instance allows

25
00:01:17,560 --> 00:01:19,900
both read and write connections to your application.

26
00:01:20,420 --> 00:01:23,130
Updates made to the primary DB instance are

27
00:01:23,130 --> 00:01:25,320
asynchronously copied to the read replica.

28
00:01:25,420 --> 00:01:31,290
Using read replicas, you can elastically scale out beyond the capacity constraints of a single DB.

29
00:01:31,300 --> 00:01:33,560
This increases the aggregate read throughput.

30
00:01:35,040 --> 00:01:37,220
Let's look at a common use case. You

31
00:01:37,220 --> 00:01:39,780
want to run a reporting application that performs some

32
00:01:39,780 --> 00:01:42,440
analytics on the RDS database. In order to

33
00:01:42,440 --> 00:01:44,820
reduce the read traffic in the primary database,

34
00:01:44,830 --> 00:01:47,090
you can create a read replica for the reporting

35
00:01:47,090 --> 00:01:50,640
application to read data directly from the read replica instead.

36
00:01:51,180 --> 00:01:53,720
Read replicas can also be promoted to stand-alone

37
00:01:53,720 --> 00:01:57,020
DB instances as a disaster recovery solution

38
00:01:57,070 --> 00:01:59,210
if the primary DB instance fails.

39
00:02:00,310 --> 00:02:03,960
As you can see, read replica help scaling out read operations.

40
00:02:03,970 --> 00:02:06,200
What about write operations?

41
00:02:06,210 --> 00:02:10,539
Amazon Aurora Multi-Master Clusters feature provides the capability

42
00:02:10,539 --> 00:02:12,870
to scale out both your read and write operations

43
00:02:13,430 --> 00:02:14,850
in a multi-master cluster.

44
00:02:14,990 --> 00:02:18,200
An Aurora Cluster consists of a set of master database nodes

45
00:02:18,320 --> 00:02:21,560
and a shared storage volume across multiple Availability Zones

46
00:02:21,630 --> 00:02:24,220
for high availability and durability of user data.

47
00:02:24,950 --> 00:02:28,120
All DB instances can perform read and write operations.

48
00:02:28,730 --> 00:02:30,070
The multi-master cluster

49
00:02:30,190 --> 00:02:32,850
doesn't use the failover mechanism because it doesn't need

50
00:02:32,850 --> 00:02:35,870
to promote another DB instance to have read/write capability.

51
00:02:36,630 --> 00:02:38,530
It offers continuous availability.

52
00:02:38,660 --> 00:02:40,460
Any DB instance in this case

53
00:02:40,570 --> 00:02:42,660
can take over the work of the failed instance.

