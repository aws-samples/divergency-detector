1
00:00:00,000 --> 00:00:04,860
AWS Identity and Access Management Features - Manage IAM Roles.

2
00:00:05,770 --> 00:00:09,870
An IAM role is an AWS identity with permission policies

3
00:00:09,880 --> 00:00:13,770
that determines what the identity can and cannot do in AWS.

4
00:00:14,390 --> 00:00:16,590
It has a many-to-one relationship.

5
00:00:16,600 --> 00:00:19,630
You can enable many users or applications to assume the

6
00:00:19,630 --> 00:00:22,100
same role to grant the same set of permissions.

7
00:00:22,970 --> 00:00:26,230
A role does not have standard long-term credentials such

8
00:00:26,230 --> 00:00:29,570
as a password or access keys associated with it.

9
00:00:29,580 --> 00:00:30,330
Instead,

10
00:00:30,340 --> 00:00:34,220
it provides you with temporary security credentials for your role session.

11
00:00:34,810 --> 00:00:37,840
The following scenarios highlight some of the challenges

12
00:00:37,850 --> 00:00:41,130
that you can address by delegating access using roles.

13
00:00:41,710 --> 00:00:44,320
To grant applications on an Amazon EC2

14
00:00:44,320 --> 00:00:47,030
instance access to AWS resources,

15
00:00:47,040 --> 00:00:50,950
developers might distribute their long-term credentials to each instance.

16
00:00:51,620 --> 00:00:55,610
Applications can then use those credentials to access resources such

17
00:00:55,610 --> 00:00:59,180
as Amazon S3 buckets or Amazon DynamoDB data.

18
00:01:00,000 --> 00:01:00,720
However,

19
00:01:00,730 --> 00:01:03,750
distributing long-term credentials to each instance is

20
00:01:03,750 --> 00:01:07,080
challenging to manage and a potential security risk.

21
00:01:07,690 --> 00:01:12,600
Therefore, the best practice is to use an AWS service role for an EC2

22
00:01:12,700 --> 00:01:16,160
instance. Applications running on that instance can retrieve

23
00:01:16,160 --> 00:01:20,020
temporary security credentials and perform actions that the role allows.

24
00:01:21,580 --> 00:01:22,930
Cross-account access.

25
00:01:23,530 --> 00:01:26,800
To control or manage access to resources such as

26
00:01:26,810 --> 00:01:30,220
isolating a development environment from a production environment,

27
00:01:30,230 --> 00:01:32,590
you might have multiple AWS accounts.

28
00:01:33,240 --> 00:01:34,730
However, in some cases,

29
00:01:34,740 --> 00:01:38,820
users from one account might need to access resources in the other account.

30
00:01:39,480 --> 00:01:40,500
For example,

31
00:01:40,510 --> 00:01:43,780
a user from the development environment might require access

32
00:01:43,780 --> 00:01:46,230
to the production environment to promote an update.

33
00:01:46,810 --> 00:01:50,590
Therefore, users must have credentials for each account but managing

34
00:01:50,590 --> 00:01:52,740
multiple credentials for multiple accounts

35
00:01:52,750 --> 00:01:54,820
makes identity management difficult.

36
00:01:55,530 --> 00:01:56,870
Using IAM Roles,

37
00:01:56,880 --> 00:01:59,600
you can take advantage of cross-account access to give

38
00:01:59,600 --> 00:02:03,000
users access across AWS accounts when they need it.

39
00:02:03,730 --> 00:02:06,130
Granting permissions to AWS services.

40
00:02:06,950 --> 00:02:08,700
You can use AWS IAM

41
00:02:08,720 --> 00:02:13,840
roles to grant permissions for AWS services to call other AWS services

42
00:02:13,840 --> 00:02:18,820
on your behalf, or create and manage AWS resources for you in your account.

43
00:02:19,350 --> 00:02:24,160
AWS services such as Amazon Lex also offer service-linked roles that

44
00:02:24,160 --> 00:02:28,170
have predefined permissions and can be assumed only by that specific service.

