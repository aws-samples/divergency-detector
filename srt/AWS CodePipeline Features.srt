1
00:00:00,190 --> 00:00:02,280
AWS CodePipeline Features.

2
00:00:02,990 --> 00:00:04,310
Here are the key features.

3
00:00:04,930 --> 00:00:06,300
Workflow modeling.

4
00:00:06,360 --> 00:00:09,240
A pipeline defines your release process workflow.

5
00:00:09,880 --> 00:00:12,000
It comprises a series of stages

6
00:00:12,040 --> 00:00:14,290
which act as logical divisions in your workflow.

7
00:00:14,950 --> 00:00:16,880
Each stage is made up of a sequence of

8
00:00:16,880 --> 00:00:19,740
actions that are performed on the application artifacts.

9
00:00:19,750 --> 00:00:23,110
A transition is the point where a pipeline execution

10
00:00:23,110 --> 00:00:24,960
moves to the next stage in the pipeline.

11
00:00:25,800 --> 00:00:27,260
Parallel executions.

12
00:00:27,270 --> 00:00:30,290
You can use CodePipeline to model your actions to run

13
00:00:30,290 --> 00:00:33,350
in parallel in order to increase your workflow speeds.

14
00:00:33,360 --> 00:00:34,900
Sequential actions.

15
00:00:34,960 --> 00:00:37,220
You can also model actions sequentially.

16
00:00:37,810 --> 00:00:39,220
You can visualize the status

17
00:00:39,260 --> 00:00:41,080
of each stage action in the pipeline.

18
00:00:42,540 --> 00:00:45,040
AWS CodePipeline provides you

19
00:00:45,060 --> 00:00:46,520
with a graphical user interface,

20
00:00:46,660 --> 00:00:48,580
allowing you to easily visualize

21
00:00:48,580 --> 00:00:50,580
and model your release process workflow.

22
00:00:52,010 --> 00:00:53,720
AWS integrations.

23
00:00:54,330 --> 00:00:57,370
AWS CodePipeline can pull source code for

24
00:00:57,370 --> 00:01:00,140
your pipeline directly from AWS CodeCommit,

25
00:01:00,150 --> 00:01:03,500
GitHub, Amazon ECR, or Amazon S3.

26
00:01:04,170 --> 00:01:06,610
It can run builds and unit tests in AWS CodeBuild.

27
00:01:06,610 --> 00:01:12,240
CodePipeline can deploy your changes using AWS CodeDeploy,

28
00:01:12,250 --> 00:01:15,940
AWS Elastic Beanstalk, Amazon Elastic Container Service,

29
00:01:16,040 --> 00:01:17,490
or AWS Fargate.

30
00:01:18,610 --> 00:01:21,160
You can model AWS CloudFormation actions that

31
00:01:21,180 --> 00:01:22,720
let you provision, update,

32
00:01:22,820 --> 00:01:26,640
or delete AWS resources as part of your release process.

33
00:01:27,330 --> 00:01:29,390
This also enables you to continuously

34
00:01:29,390 --> 00:01:32,960
deliver serverless applications built using AWS Lambda,

35
00:01:32,980 --> 00:01:34,520
Amazon API Gateway,

36
00:01:34,580 --> 00:01:36,400
and Amazon DynamoDB

37
00:01:36,440 --> 00:01:38,880
with the AWS Serverless Application model,

38
00:01:38,950 --> 00:01:40,110
AWS SAM.

39
00:01:40,830 --> 00:01:43,560
You can also trigger custom functions defined by code

40
00:01:43,600 --> 00:01:45,280
at any stage of your pipeline

41
00:01:45,360 --> 00:01:48,650
using CodePipeline's integration with AWS Lambda.

42
00:01:50,060 --> 00:01:51,250
Pre-built plug-ins.

43
00:01:51,920 --> 00:01:54,420
AWS CodePipeline allows you

44
00:01:54,440 --> 00:01:56,730
integrate third-party developer tools like

45
00:01:56,730 --> 00:01:59,890
GitHub or Jenkins into any stage of your release process

46
00:01:59,900 --> 00:02:00,920
with one click.

47
00:02:01,530 --> 00:02:03,980
You can use third-party tools for source control,

48
00:02:04,040 --> 00:02:06,720
build, test, or deployment.

49
00:02:07,080 --> 00:02:08,100
Custom plug-ins.

50
00:02:08,770 --> 00:02:10,760
AWS CodePipeline allows you

51
00:02:10,780 --> 00:02:12,430
to integrate your own custom systems.

52
00:02:13,080 --> 00:02:14,840
You can register a custom action

53
00:02:14,860 --> 00:02:16,540
by integrating the CodePipeline

54
00:02:16,540 --> 00:02:18,430
open-source agent with your servers.

55
00:02:18,440 --> 00:02:19,880
The custom action allows you

56
00:02:19,920 --> 00:02:21,750
to hook your servers into your pipeline.

57
00:02:22,330 --> 00:02:24,880
You can also use the CodePipeline Jenkins plug in

58
00:02:24,980 --> 00:02:27,480
to easily register your existing build servers

59
00:02:27,580 --> 00:02:28,960
as a custom action.

60
00:02:30,140 --> 00:02:31,390
Declarative templates.

61
00:02:31,470 --> 00:02:35,320
AWS CodePipeline allows you to define your pipeline

62
00:02:35,320 --> 00:02:37,930
structure through a declarative JSON document.

63
00:02:37,940 --> 00:02:40,360
This document specifies your release workflow,

64
00:02:40,440 --> 00:02:42,460
its stages, and actions.

65
00:02:42,470 --> 00:02:44,080
These documents enable you

66
00:02:44,120 --> 00:02:45,620
to update existing pipelines

67
00:02:45,910 --> 00:02:47,660
as well as provide starting templates

68
00:02:47,700 --> 00:02:49,240
for creating new pipelines.

69
00:02:50,440 --> 00:02:51,720
Access control.

70
00:02:51,840 --> 00:02:55,640
AWS CodePipeline uses AWS IAM

71
00:02:55,740 --> 00:02:58,160
to manage who can make changes to your release workflow

72
00:02:58,220 --> 00:03:00,100
as well as who can control it.

73
00:03:00,110 --> 00:03:02,390
You can grant users access through IAM users,

74
00:03:02,390 --> 00:03:05,670
IAM roles, and SAML integrated directories.

75
00:03:06,500 --> 00:03:08,080
Receive notifications.

76
00:03:08,090 --> 00:03:10,440
You can create notifications for events

77
00:03:10,540 --> 00:03:12,160
impacting your pipelines.

78
00:03:12,280 --> 00:03:14,480
Notifications will come in the form of

79
00:03:14,540 --> 00:03:16,480
Amazon SNS notifications.

80
00:03:16,490 --> 00:03:19,200
Each notification includes a status message

81
00:03:19,260 --> 00:03:20,880
as well as a link to the resources

82
00:03:20,980 --> 00:03:23,090
whose event generated that notification.

